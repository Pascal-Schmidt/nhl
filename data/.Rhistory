splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
for(v in 1:n){ # select a variable to split on
print(paste("n", n))
print(paste("v", v))
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t) # will
} # end if
} # end loop over splits
} # end loop over variables
n <- n-1
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
rp <- recpart_fwd(y,x,Mmax=9)
debug(recpart_fwd)
recpart_fwd(y,x,Mmax=9)
setwd("~/")
setwd("~/")
Mmax <- ifelse(Mmax>=2,Mmax,{warning("Mmax must be 2 or more");2})
Mmax = 1
Mmax <- ifelse(Mmax>=2,Mmax,{warning("Mmax must be 2 or more");2})
print(Mmax)
Mmax = 1
Mmax <- if(Mmax>=2){Mmax}else{warning("Mmax must be 2 or more");2}
print(Mmax)
knitr::opts_chunk$set(echo = TRUE)
recpart_fwd <- function(y,x,Mmax){
#---------------------------------------------------
# Error checking:
#---------------------------------------------------
# Initialize:
N <- length(y) # sample size
n <- ncol(x) # number of predictors
B <- init_B(N,Mmax) # Exercise: write init_B()
splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
for(v in 1:n){ # select a variable to split on
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t)
} # end if
} # end loop over splits
} # end loop over variables
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
LOF <- function(form,data) {
ff <- lm(form,data)
return(sum(residuals(ff)^2))
}
#-------------------------------------
set.seed(123); n <- 10
x <- data.frame(x1=rnorm(n),x2=rnorm(n))
y <- rnorm(n)
# rp <- recpart_fwd(y,x,Mmax=2)
init_B(100,2)[1,"B1"]
recpart_fwd <- function(y,x,Mmax){
#---------------------------------------------------
# Error checking:
#---------------------------------------------------
# Initialize:
N <- length(y) # sample size
n <- ncol(x) # number of predictors
B <- init_B(N,Mmax) # Exercise: write init_B()
splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
for(v in 1:n){ # select a variable to split on
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t)
} # end if
} # end loop over splits
} # end loop over variables
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
LOF <- function(form,data) {
ff <- lm(form,data)
return(sum(residuals(ff)^2))
}
#-------------------------------------
knitr::opts_chunk$set(echo = TRUE)
init_B <- function(N,Mmax) {
B <- data.frame(matrix(NA,nrow=N,ncol=(Mmax+1)))
B[,1] <- 1
names(B) <- c("B0",paste0("B",1:Mmax))
return(B)
}
init_B(100,2)[1,"B1"]
split_points <- function(xv,Bm) {
out <- sort(unique(xv[Bm>0]))
return(out[-length(out)])
}
split_points(1:5,c(1,0,0,0,1))
recpart_fwd <- function(y,x,Mmax){
N <- length(y) # sample size
n <- ncol(x) # number of predictors
B <- init_B(N,Mmax) # Exercise: write init_B()
splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
for(v in 1:n){ # select a variable to split on
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t) # will
} # end if
} # end loop over splits
} # end loop over variables
n <- n-1
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
set.seed(123); n <- 10; x <- data.frame(x1=rnorm(n),x2=rnorm(n));y <- rnorm(n)
recpart_fwd <- function(y,x,Mmax){
N <- length(y) # sample size
n <- ncol(x) # number of predictors
B <- init_B(N,Mmax) # Exercise: write init_B()
splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
browser()
for(v in 1:n){ # select a variable to split on
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t) # will
} # end if
} # end loop over splits
} # end loop over variables
n <- n-1
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
browser()
browser()
recpart_fwd <- function(y,x,Mmax){
N <- length(y) # sample size
n <- ncol(x) # number of predictors
B <- init_B(N,Mmax) # Exercise: write init_B()
splits <- data.frame(m=rep(NA,Mmax),v=rep(NA,Mmax),t=rep(NA,Mmax))
#---------------------------------------------------
# Looping for forward selection:
for(M in 1:Mmax) { # contrast to indexing 2...Mmax in Friedman
lof_best <- Inf
for(m in 1:M) { # choose a basis function to split
browser()
for(v in 1:n){ # select a variable to split on
tt <- split_points(x[,v],B[,m]) # Exercise: write split_points()
for(t in tt) {
Bnew <- data.frame(B[,(1:M)[-m]],
Btem1=B[,m]*(x[,v]>t),Btem2=B[,m]*(x[,v]<=t))
gdat <- data.frame(y=y,Bnew)
lof <- LOF(y~.,gdat) #  Use your LOF() from week 4
if(lof < lof_best) {
lof_best <- lof
splits[M,] <- c(m,v,t) # will
} # end if
} # end loop over splits
} # end loop over variables
n <- n-1
} # end loop over basis functions to split
m <- splits[M,1]; v <- splits[M,2]; t <- splits[M,3]
B[,M+1] <- B[,m]*(x[,v]<=t)
B[,m] <- B[,m]*(x[,v]>t)
} # end loop over M
return(list(B=B,splits=splits))
}
Mmax = 1
Mmax <- ifelse(Mmax>=2,Mmax,{warning("Mmax must be 2 or more");2})
Mmax = 3
Mmax <- ifelse(Mmax>=2,Mmax,{warning("Mmax must be 2 or more");2})
Mmax
install.packages("provis")
install.packages("profis")
H <- function(x){
return(as.numeric(x >= 0))
}
source('recpart_fwd.R')
set.seed(123); n = 10
x <- data.frame(x1=rnorm(n), x2=rnorm(n))
DEN_fge <- sum(DEN_t$FieldGoalsMade)
LAL_fge <- sum(LAL_t$FieldGoalsMade)/sum(LAL_t$FieldGoalsAttempted)
x <- fetch_NBAPlayerStatistics(season = "09-10", what = c("", ".Home", ".Away"))
as_tibble(x)
x$Team <- as.character(x$Team)
team_dist <- x %>%
distinct(Team)
team_dist <- team_dist[-29,]
team_dist
DEN_t <- x[x$Team == c("DEN"),]
CHA_t <- x[x$Team == c("CHA"),]
POR_t <- x[x$Team == c("POR"),]
CHI_t <- x[x$Team == c("CHI"),]
BOS_t <- x[x$Team == c("BOS"),]
ORL_t <- x[x$Team == c("ORL"),]
PHO_t <- x[x$Team == c("PHO"),]
HOU_t <- x[x$Team == c("HOU"),]
OKL_t <- x[x$Team == c("OKL"),]
MIA_t <- x[x$Team == c("MIA"),]
WAS_t <- x[x$Team == c("WAS"),]
SAC_t <- x[x$Team == c("SAC"),]
LAL_t <- x[x$Team == c("LAL"),]
MEM_t <- x[x$Team == c("MEM"),]
DET_t <- x[x$Team == c("DET"),]
GSW_t <- x[x$Team == c("GSW"),]
TOR_t <- x[x$Team == c("TOR"),]
DAL_t <- x[x$Team == c("DAL"),]
NYK_t <- x[x$Team == c("NYK"),]
NJN_t <- x[x$Team == c("NJN"),]
MIL_t <- x[x$Team == c("MIL"),]
ATL_t <- x[x$Team == c("ATL"),]
SAN_t <- x[x$Team == c("SAN"),]
LAC_t <- x[x$Team == c("LAC"),]
UTA_t <- x[x$Team == c("UTA"),]
PHI_t <- x[x$Team == c("PHI"),]
MIN_t <- x[x$Team == c("MIN"),]
NOR_t <- x[x$Team == c("NOR"),]
IND_t <- x[x$Team == c("IND"),]
CLE_t <- x[x$Team == c("CLE"),]
tot_t<- c(DEN_t, CHA_t, LAL_t)
DEN_points = nrow(count(DEN_t[DEN_t$TotalPoints >= 800,]))
CHA_points = nrow(count(CHA_t[CHA_t$TotalPoints >= 800,]))
POR_points = nrow(count(POR_t[POR_t$TotalPoints >= 800,]))
CHI_points = nrow(count(CHI_t[CHI_t$TotalPoints >= 800,]))
BOS_points = nrow(count(BOS_t[BOS_t$TotalPoints >= 800,]))
ORL_points = nrow(count(ORL_t[ORL_t$TotalPoints >= 800,]))
PHO_points = nrow(count(PHO_t[PHO_t$TotalPoints >= 800,]))
HOU_points = nrow(count(HOU_t[HOU_t$TotalPoints >= 800,]))
OKL_points = nrow(count(OKL_t[OKL_t$TotalPoints >= 800,]))
MIA_points = nrow(count(MIA_t[MIA_t$TotalPoints >= 800,]))
WAS_points = nrow(count(WAS_t[WAS_t$TotalPoints >= 800,]))
SAC_points = nrow(count(SAC_t[SAC_t$TotalPoints >= 800,]))
LAL_points = nrow(count(LAL_t[LAL_t$TotalPoints >= 800,]))
MEM_points = nrow(count(MEM_t[MEM_t$TotalPoints >= 800,]))
DET_points = nrow(count(DET_t[DET_t$TotalPoints >= 800,]))
GSW_points = nrow(count(GSW_t[GSW_t$TotalPoints >= 800,]))
TOR_points = nrow(count(TOR_t[TOR_t$TotalPoints >= 800,]))
DAL_points = nrow(count(DAL_t[DAL_t$TotalPoints >= 800,]))
NYK_points = nrow(count(NYK_t[NYK_t$TotalPoints >= 800,]))
NJN_points = nrow(count(NJN_t[NJN_t$TotalPoints >= 800,]))
MIL_points = nrow(count(MIL_t[MIL_t$TotalPoints >= 800,]))
ATL_points = nrow(count(ATL_t[ATL_t$TotalPoints >= 800,]))
SAN_points = nrow(count(SAN_t[SAN_t$TotalPoints >= 800,]))
LAC_points = nrow(count(LAC_t[LAC_t$TotalPoints >= 800,]))
UTA_points = nrow(count(UTA_t[UTA_t$TotalPoints >= 800,]))
PHI_points = nrow(count(PHI_t[PHI_t$TotalPoints >= 800,]))
MIN_points = nrow(count(MIN_t[MIN_t$TotalPoints >= 800,]))
NOR_points = nrow(count(NOR_t[NOR_t$TotalPoints >= 800,]))
IND_points = nrow(count(IND_t[IND_t$TotalPoints >= 800,]))
CLE_points = nrow(count(CLE_t[CLE_t$TotalPoints >= 800,]))
#B = Selecting players from each team which have at least 300 rebounds
LAL_rebound = nrow(count(LAL_t[LAL_t$TotalRebounds > 300, ]))
DEN_rebound = nrow(count(DEN_t[DEN_t$TotalRebounds >= 300,]))
CHA_rebound = nrow(count(CHA_t[CHA_t$TotalRebounds >= 300,]))
POR_rebound = nrow(count(POR_t[POR_t$TotalRebounds >= 300,]))
CHI_rebound = nrow(count(CHI_t[CHI_t$TotalRebounds >= 300,]))
BOS_rebound = nrow(count(BOS_t[BOS_t$TotalRebounds >= 300,]))
ORL_rebound = nrow(count(ORL_t[ORL_t$TotalRebounds >= 300,]))
PHO_rebound = nrow(count(PHO_t[PHO_t$TotalRebounds >= 300,]))
HOU_rebound = nrow(count(HOU_t[HOU_t$TotalRebounds >= 300,]))
OKL_rebound = nrow(count(OKL_t[OKL_t$TotalRebounds >= 300,]))
MIA_rebound = nrow(count(MIA_t[MIA_t$TotalRebounds >= 300,]))
WAS_rebound = nrow(count(WAS_t[WAS_t$TotalRebounds >= 300,]))
SAC_rebound = nrow(count(SAC_t[SAC_t$TotalRebounds >= 300,]))
LAL_rebound = nrow(count(LAL_t[LAL_t$TotalRebounds >= 300,]))
MEM_rebound = nrow(count(MEM_t[MEM_t$TotalRebounds >= 300,]))
DET_rebound = nrow(count(DET_t[DET_t$TotalRebounds >= 300,]))
GSW_rebound = nrow(count(GSW_t[GSW_t$TotalRebounds >= 300,]))
TOR_rebound = nrow(count(TOR_t[TOR_t$TotalRebounds >= 300,]))
DAL_rebound = nrow(count(DAL_t[DAL_t$TotalRebounds >= 300,]))
NYK_rebound = nrow(count(NYK_t[NYK_t$TotalRebounds >= 300,]))
NJN_rebound = nrow(count(NJN_t[NJN_t$TotalRebounds >= 300,]))
MIL_rebound = nrow(count(MIL_t[MIL_t$TotalRebounds >= 300,]))
ATL_rebound = nrow(count(ATL_t[ATL_t$TotalRebounds >= 300,]))
SAN_rebound = nrow(count(SAN_t[SAN_t$TotalRebounds >= 300,]))
LAC_rebound = nrow(count(LAC_t[LAC_t$TotalRebounds >= 300,]))
UTA_rebound = nrow(count(UTA_t[UTA_t$TotalRebounds >= 300,]))
PHI_rebound = nrow(count(PHI_t[PHI_t$TotalRebounds >= 300,]))
MIN_rebound = nrow(count(MIN_t[MIN_t$TotalRebounds >= 300,]))
NOR_rebound = nrow(count(NOR_t[NOR_t$TotalRebounds >= 300,]))
IND_rebound = nrow(count(IND_t[IND_t$TotalRebounds >= 300,]))
CLE_rebound = nrow(count(CLE_t[CLE_t$TotalRebounds >= 300,]))
#C = Selecting players who have at least 200 assists
LAL_assist = nrow(count(LAL_t[LAL_t$Assists > 200, ]))
LAL_fge <- sum(LAL_t$FieldGoalsMade)/sum(LAL_t$FieldGoalsAttempted)
DEN_fge <- sum(DEN_t$FieldGoalsMade)/sum(DEN_t$FieldGoalsAttempted)
DEN_fge
DEN_fge <- sum(DEN_t$FieldGoalsMade)/sum(DEN_t$FieldGoalsAttempted)
DEN_fge
LAL_fge
LAL_t
library(SportsAnalytics)
library(tidyr)
library(tidyverse)
library(dplyr)
x <- fetch_NBAPlayerStatistics(season = "09-10", what = c("", ".Home", ".Away"))
as_tibble(x)
x$Team <- as.character(x$Team)
team_dist <- x %>%
distinct(Team)
team_dist <- team_dist[-29,]
team_dist
DEN_t <- x[x$Team == c("DEN"),]
CHA_t <- x[x$Team == c("CHA"),]
POR_t <- x[x$Team == c("POR"),]
CHI_t <- x[x$Team == c("CHI"),]
BOS_t <- x[x$Team == c("BOS"),]
ORL_t <- x[x$Team == c("ORL"),]
PHO_t <- x[x$Team == c("PHO"),]
HOU_t <- x[x$Team == c("HOU"),]
OKL_t <- x[x$Team == c("OKL"),]
MIA_t <- x[x$Team == c("MIA"),]
WAS_t <- x[x$Team == c("WAS"),]
SAC_t <- x[x$Team == c("SAC"),]
LAL_t <- x[x$Team == c("LAL"),]
MEM_t <- x[x$Team == c("MEM"),]
DET_t <- x[x$Team == c("DET"),]
GSW_t <- x[x$Team == c("GSW"),]
TOR_t <- x[x$Team == c("TOR"),]
DAL_t <- x[x$Team == c("DAL"),]
NYK_t <- x[x$Team == c("NYK"),]
NJN_t <- x[x$Team == c("NJN"),]
MIL_t <- x[x$Team == c("MIL"),]
ATL_t <- x[x$Team == c("ATL"),]
SAN_t <- x[x$Team == c("SAN"),]
LAC_t <- x[x$Team == c("LAC"),]
UTA_t <- x[x$Team == c("UTA"),]
PHI_t <- x[x$Team == c("PHI"),]
MIN_t <- x[x$Team == c("MIN"),]
NOR_t <- x[x$Team == c("NOR"),]
IND_t <- x[x$Team == c("IND"),]
CLE_t <- x[x$Team == c("CLE"),]
tot_t<- c(DEN_t, CHA_t, LAL_t)
DEN_points = nrow(count(DEN_t[DEN_t$TotalPoints >= 800,]))
CHA_points = nrow(count(CHA_t[CHA_t$TotalPoints >= 800,]))
POR_points = nrow(count(POR_t[POR_t$TotalPoints >= 800,]))
CHI_points = nrow(count(CHI_t[CHI_t$TotalPoints >= 800,]))
BOS_points = nrow(count(BOS_t[BOS_t$TotalPoints >= 800,]))
ORL_points = nrow(count(ORL_t[ORL_t$TotalPoints >= 800,]))
PHO_points = nrow(count(PHO_t[PHO_t$TotalPoints >= 800,]))
HOU_points = nrow(count(HOU_t[HOU_t$TotalPoints >= 800,]))
OKL_points = nrow(count(OKL_t[OKL_t$TotalPoints >= 800,]))
MIA_points = nrow(count(MIA_t[MIA_t$TotalPoints >= 800,]))
WAS_points = nrow(count(WAS_t[WAS_t$TotalPoints >= 800,]))
SAC_points = nrow(count(SAC_t[SAC_t$TotalPoints >= 800,]))
LAL_points = nrow(count(LAL_t[LAL_t$TotalPoints >= 800,]))
MEM_points = nrow(count(MEM_t[MEM_t$TotalPoints >= 800,]))
DET_points = nrow(count(DET_t[DET_t$TotalPoints >= 800,]))
GSW_points = nrow(count(GSW_t[GSW_t$TotalPoints >= 800,]))
TOR_points = nrow(count(TOR_t[TOR_t$TotalPoints >= 800,]))
DAL_points = nrow(count(DAL_t[DAL_t$TotalPoints >= 800,]))
NYK_points = nrow(count(NYK_t[NYK_t$TotalPoints >= 800,]))
NJN_points = nrow(count(NJN_t[NJN_t$TotalPoints >= 800,]))
MIL_points = nrow(count(MIL_t[MIL_t$TotalPoints >= 800,]))
ATL_points = nrow(count(ATL_t[ATL_t$TotalPoints >= 800,]))
SAN_points = nrow(count(SAN_t[SAN_t$TotalPoints >= 800,]))
LAC_points = nrow(count(LAC_t[LAC_t$TotalPoints >= 800,]))
UTA_points = nrow(count(UTA_t[UTA_t$TotalPoints >= 800,]))
PHI_points = nrow(count(PHI_t[PHI_t$TotalPoints >= 800,]))
MIN_points = nrow(count(MIN_t[MIN_t$TotalPoints >= 800,]))
NOR_points = nrow(count(NOR_t[NOR_t$TotalPoints >= 800,]))
IND_points = nrow(count(IND_t[IND_t$TotalPoints >= 800,]))
CLE_points = nrow(count(CLE_t[CLE_t$TotalPoints >= 800,]))
#B = Selecting players from each team which have at least 300 rebounds
LAL_rebound = nrow(count(LAL_t[LAL_t$TotalRebounds > 300, ]))
DEN_rebound = nrow(count(DEN_t[DEN_t$TotalRebounds >= 300,]))
CHA_rebound = nrow(count(CHA_t[CHA_t$TotalRebounds >= 300,]))
POR_rebound = nrow(count(POR_t[POR_t$TotalRebounds >= 300,]))
CHI_rebound = nrow(count(CHI_t[CHI_t$TotalRebounds >= 300,]))
BOS_rebound = nrow(count(BOS_t[BOS_t$TotalRebounds >= 300,]))
ORL_rebound = nrow(count(ORL_t[ORL_t$TotalRebounds >= 300,]))
PHO_rebound = nrow(count(PHO_t[PHO_t$TotalRebounds >= 300,]))
HOU_rebound = nrow(count(HOU_t[HOU_t$TotalRebounds >= 300,]))
OKL_rebound = nrow(count(OKL_t[OKL_t$TotalRebounds >= 300,]))
MIA_rebound = nrow(count(MIA_t[MIA_t$TotalRebounds >= 300,]))
WAS_rebound = nrow(count(WAS_t[WAS_t$TotalRebounds >= 300,]))
SAC_rebound = nrow(count(SAC_t[SAC_t$TotalRebounds >= 300,]))
LAL_rebound = nrow(count(LAL_t[LAL_t$TotalRebounds >= 300,]))
MEM_rebound = nrow(count(MEM_t[MEM_t$TotalRebounds >= 300,]))
DET_rebound = nrow(count(DET_t[DET_t$TotalRebounds >= 300,]))
GSW_rebound = nrow(count(GSW_t[GSW_t$TotalRebounds >= 300,]))
TOR_rebound = nrow(count(TOR_t[TOR_t$TotalRebounds >= 300,]))
DAL_rebound = nrow(count(DAL_t[DAL_t$TotalRebounds >= 300,]))
NYK_rebound = nrow(count(NYK_t[NYK_t$TotalRebounds >= 300,]))
NJN_rebound = nrow(count(NJN_t[NJN_t$TotalRebounds >= 300,]))
MIL_rebound = nrow(count(MIL_t[MIL_t$TotalRebounds >= 300,]))
ATL_rebound = nrow(count(ATL_t[ATL_t$TotalRebounds >= 300,]))
SAN_rebound = nrow(count(SAN_t[SAN_t$TotalRebounds >= 300,]))
LAC_rebound = nrow(count(LAC_t[LAC_t$TotalRebounds >= 300,]))
UTA_rebound = nrow(count(UTA_t[UTA_t$TotalRebounds >= 300,]))
PHI_rebound = nrow(count(PHI_t[PHI_t$TotalRebounds >= 300,]))
MIN_rebound = nrow(count(MIN_t[MIN_t$TotalRebounds >= 300,]))
NOR_rebound = nrow(count(NOR_t[NOR_t$TotalRebounds >= 300,]))
IND_rebound = nrow(count(IND_t[IND_t$TotalRebounds >= 300,]))
CLE_rebound = nrow(count(CLE_t[CLE_t$TotalRebounds >= 300,]))
#C = Selecting players who have at least 200 assists
LAL_assist = nrow(count(LAL_t[LAL_t$Assists > 200, ]))
LAL_fge <- sum(LAL_t$FieldGoalsMade)/sum(LAL_t$FieldGoalsAttempted)
DEN_fge <- sum(DEN_t$FieldGoalsMade)/sum(DEN_t$FieldGoalsAttempted)
DEN_fge
LAL_fge
TOR_fge <- sum(TOR_t$FieldGoalsMade)/sum(TOR_t$FieldGoalsAttempted)
TOR_fge
LAL_fge <- sum(LAL_t$FieldGoalsMade)/sum(LAL_t$FieldGoalsAttempted)
LAL_fge
DEN_fge <- sum(NJN_t$FieldGoalsMade)/sum(NJN_t$FieldGoalsAttempted)
DEN_fge
TOR_fge <- sum(MIN_t$FieldGoalsMade)/sum(MIN_t$FieldGoalsAttempted)
TOR_fge
teams_fge <- str_detect(x, "DEN")
teams_fge <- str_detect(x$Team, "DEN")
teams_fge
teams_fge <- str_detect(x$Team, "DEN")
str_detect(x$Team, "DEN")
str_subset(x$Team, "DEN")
str_subset(x, "DEN")
?subset
subset(x, "DEN")
teams_fge <- str_detect(x$Team, "DEN") %>%
str_subset()
teams_fge <- str_detect(x$Team, "DEN") %>%
str_subset()
mydata <- read.delim("crimerate.txt", sep = "")
mydata
mydata <- na.omit(mydata)
mydata <- scale(mydata)
library(maggittr)
library(magrittr)
foo_foo_1 <- hop(foo_foo, through = forest)
foo_foo_2 <- scoop(foo_foo_1, up = field_mice)
foo_foo_3 <- bop(foo_foo_2, on = head)
diamonds <- ggplot2::diamonds
library(magrittr)
foo_foo <- little_bunny()
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
pryr::object_size(diamonds)
library(tidyverse)
library(rvest)
library(xml2)
library(janitor)
setwd("E:/Currentdirectory/dataanalysis/nhl/data")
